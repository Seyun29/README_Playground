name: Dispatch Test

on:
  workflow_dispatch:
    inputs:
      env:
          type: choice
          description: select deploy environment
          required: true
          options:
            - development
            - staging
            - production
      #in case of deploying to multiregion
      region:
        type: choice
        required: true
        description: Choose Region for production (only for ECS-MultiRegion deployment)
        options:
          - Tokyo
          - Seoul
          - Oregon
          - Frankfurt
          - Skip (Not deploying to ECS-MultiRegion)
        default: Skip (Not deploying to ECS-MultiRegion)

env:
  INPUT_ENV: ${{ github.event.inputs.env }}
  INPUT_REGION: ${{ contains(github.event.inputs.region, 'Skip') && 'Skip' || github.event.inputs.region }}
  #위 replacement 적용하기
      
jobs:
  TESTS:
    runs-on: ubuntu-latest
    steps:
      - name: checkout Repository
        id: checkout
        uses: actions/checkout@v4.1.1
      #test1 - /abcd -> 테스트 (skip) : O
      #test2 - /READ & Skip -> exit 1 => 후속 step실행여부 확인 (안되면 always 사용해야됨)
      #test3 - /REAd & valid region -> normal case
      - name: Check Region Option for MultiRegion Deployment
        id: checkRegion
        run: |
          if [ "${{ contains( github.repository, '/READ' ) }}" = "true" ]; then
            echo "Not a MultiRegion Deployment, Skipping this step"
          elif [ "${{ env.INPUT_REGION }}" = "Skip" ]; then
            echo "Input Region is not given, Please select a region for MultiRegion Deployment and try again"
            exit 1
          else
            echo "start MultiRegion Deployment"
          fi
          
      - name: composite action test, set REGION
        id: composite
        uses: ./.github/actions/test/test/
      
      # - name: check whether success
      #   if: always()
      #   shell: bash
      #   run: |
      #     echo ${{ !contains(join(steps.*.outcome, ','), 'failure') }}
      #     echo ${{ steps.checkRegion.outcome }}
      #assign ID to 'necessary' steps to decide whether the job is success or failure
      - name: Notify Slack
        if: always()
        uses: ./.github/actions/test/slack-test/
        with:
          IS_SUCCESS: ${{ !contains(join(steps.*.outcome, ','), 'failure') }}
          PERSONAL_SLACK_WEBHOOK: ${{ secrets.PERSONAL_SLACK_WEBHOOK }}
          TITLE_ONSUCCESS: >-
            ${{ contains( github.repository, '/rakuten-drive-cloud-transfer' )
            && format('DEPLOYMENT SUCCESS in {0}', env.INPUT_ENV) 
            || format('DEPLOYMENT SUCCESS in {0} - {1}', env.INPUT_ENV, env.INPUT_REGION) }}
          TITLE_ONFAIL: >-
            ${{ contains( github.repository, '/rakuten-drive-cloud-transfer' )
            && format('DEPLOYMENT FAILED in {0}', env.INPUT_ENV) 
            || format('DEPLOYMENT FAILED in {0} - {1}', env.INPUT_ENV, env.INPUT_REGION) }}
          MESSAGE: ${{ contains(join(steps.*.outcome, ','), 'success') }}

      #multiline 테스트 - O 
      #환경변수 덮어쓰기 테스트 - O (Okay with >>)
      #슬랙 composite action 테스트 - O
      #Exit-1시에도 슬랙 failure trigger되는지 확인, ECS-multi & Skip일때 Exit-1.
      #success 적어도 한개 포함이 아니라, fail 한개 
      #변경사항 적용하기
      #build 테스트 (policy, cloud-transfer, fe-b2b)
      #release, ci 주석 처리 후 테스트 (policy, cloud-transfer, fe-b2b)


      # - name: test Overwriting environments
      #   run: |
      #     echo "${{ env.INPUT_REGION }}"
      #     echo "INPUT_REGION=overwrite1" >> $GITHUB_ENV
      #     echo "INPUT_ENV=overwrite2" >> $GITHUB_ENV

      # - name: print env
      #   run: |
      #     echo "${{ env.INPUT_REGION }}"
      #     echo "${{ env.INPUT_ENV }}"



      # - name: Slack Notification
      #   uses: rtCamp/action-slack-notify@v2
      #   env:
      #     SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          

  
    # steps:
    #   - name: Check if region input is provided
    #     run: |
    #       if [[ "${{ github.event.inputs.region }}" == "null" ]]; then
    #         echo "Region input not provided"
    #       else
    #         echo "Region input provided: ${{ github.event.inputs.region }}"
    #       fi
    #     shell: bash

    #   - name: condition test
    #     run: |     
    #       echo "RESULT=${{ github.event_name == 'push' && 'PUSH_EVENT' || 'OTHER_EVENT' }}" >> $GITHUB_ENV
    #       echo "${{ github.event_name == 'push' && 'PUSH_EVENT' || 'OTHER_EVENT' }}"
        
